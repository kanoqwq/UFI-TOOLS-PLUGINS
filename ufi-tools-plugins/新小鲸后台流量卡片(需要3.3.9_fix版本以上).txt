<script>
    (async () => {
        let cardNumber = 'Âç°Âè∑'; // ‰Ω†ÁöÑÂç°Âè∑
        const customTitle = ''; // ÂèØËá™ÂÆö‰πâÁöÑÂè≥‰∏äËßíÊñáÊú¨ÔºåÊåâÈúÄ‰øÆÊîπ
        const now = Math.floor(Date.now() / 1000);

        const fetchData = async () => {
            try {
                const data = new URLSearchParams();
                data.append('card', cardNumber);

                const response = await fetch("/api/proxy/--http://xjxj.iot889.cn/app/card/login", {
                    method: 'POST',
                    body: data,
                    headers: {
                        Host: "xjxj.iot889.cn",
                        'User-Agent': "...",
                        "content-type": "application/x-www-form-urlencoded",
                        "Origin": "http://xjxj.iot889.cn",
                        "Referer": "http://xjxj.iot889.cn/wap/"
                    },
                    credentials: 'omit'
                });
                const response1 = await fetch("/api/proxy/--http://xjxj.iot889.cn/app/client/card/get", {
                    method: 'GET',
                    headers: {
                        Host: "xjxj.iot889.cn",
                        'User-Agent': "...",
                        "content-type": "application/json;charset=UTF-8",
                        "Referer": "http://xjxj.iot889.cn/wap/pages/home/home",
                        "Kano-Cookie": response.headers.get('kano-setck').split(';')[0]
                    },
                    credentials: 'omit'
                });

                if (!response.ok) throw new Error('ËØ∑Ê±ÇÂ§±Ë¥•');
                if (!response1.ok) throw new Error('ËØ∑Ê±ÇÂ§±Ë¥•');
                //Â§ÑÁêÜËøîÂõû‰Ωì,ÂºÄÂèëËÄÖÂèØÊ†πÊçÆËØ∑Ê±ÇËøîÂõûÁöÑÂ≠óÊÆµËá™Ë°åÊõ¥ÊîπÔºåÂÖ∂‰ªñÂú∞Êñπ‰∏çÈúÄË¶ÅÊîπ
                let res = (await response.json())?.data
                let res1 = (await response1.json())?.data
                let op = 0
                if(res.showName.includes('ÁßªÂä®'))op = 3
                if(res.showName.includes('ËÅîÈÄö'))op = 2
                if(res.showName.includes('Áîµ‰ø°'))op = 1
                return {
                    code: 1,
                    data: {
                        card: {
                            voidUsedFlow: res1.realUsed,
                            voidTotalFlow: res1.realUsed + res1.free,
                            becomedueDatetime: res1.expirationTime,
                            groupOperator: op
                        }
                    }
                };
            } catch (err) {
                console.error("ËØ∑Ê±ÇÂ§±Ë¥•Ôºö", err);
                return null;
            }
        };

        const showData = (data) => {
            const card = data.data.card;
            const usedData = card.voidUsedFlow;
            const totalData = card.voidTotalFlow;
            const expireDate = card.becomedueDatetime?.split('T')[0] || 'Êú™Áü•';
            const groupOperator = card.groupOperator || 0;

            const getOperatorName = (op) => {
                switch (op) {
                    case 1: return 'üëª‰∏≠ÂõΩÁîµ‰ø°üëª';
                    case 2: return 'üëª‰∏≠ÂõΩËÅîÈÄöüëª';
                    case 3: return 'üëª‰∏≠ÂõΩÁßªÂä®üëª';
                    default: return 'Êú™Áü•ËøêËê•ÂïÜ';
                }
            };
            const operatorName = getOperatorName(groupOperator);

            const netCard = document.querySelector('.net-card');
            const el = document.createElement('div');
            const el_title = document.createElement('div');

            el.style.marginBottom = '0';
            el.style.gridColumn = '1/-1';
            el.style.marginLeft = '0px';
            el.style.marginRight = '0px';
            el_title.innerHTML = customTitle; // ‰ΩøÁî®Ëá™ÂÆö‰πâÊ†áÈ¢ò
            el_title.style.position = 'absolute';
            el_title.style.right = '6px';
            el_title.style.top = '6px';

            el.style.width = '200px';
            el.classList.add('wlk', 'statusCard', 'net-card');
            el.style.position = 'relative';
            el.style.padding = "8px";
            el.style.fontSize = '11px';
            el.style.boxSizing = 'border-box';
            el.style.height = '60px';

            const progress = Math.min(Number(usedData) / Number(totalData) * 100, 100).toFixed(2);

            const formatFlow = (flow) => {
                const num = Number(flow) / 1024;
                return num % 1 === 0 ? num.toFixed(0) : num.toFixed(2);
            };
            const usedFlowText = formatFlow(usedData);
            const totalFlowText = formatFlow(totalData);

            const getProgressColor = (percent) => {
                if (percent <= 80) {
                    const ratio = percent / 80;
                    const r = Math.floor(255 * ratio);
                    return `rgb(${r},255,0)`;
                } else {
                    const ratio = (percent - 80) / 20;
                    const g = Math.floor(255 * (1 - ratio));
                    return `rgb(255,${g},0)`;
                }
            };

            const animateProgress = (element, targetProgress) => {
                let startTime = null;
                const duration = 1000;
                const progressBar = element.querySelector('.progress-bar');
                const progressText = element.querySelector('.progress-text');
                const animate = (timestamp) => {
                    if (!startTime) startTime = timestamp;
                    const elapsed = timestamp - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    const currentProgress = progress * targetProgress;
                    progressBar.style.width = `${currentProgress}%`;
                    progressBar.style.background = getProgressColor(currentProgress);
                    progressText.textContent = `${currentProgress.toFixed(2)}%`;
                    if (progress < 1) requestAnimationFrame(animate);
                };
                requestAnimationFrame(animate);
            };

            el.innerHTML = `
          ËøêËê•ÂïÜ: ${operatorName}
          <div style="width:100%; background:transparent; border:1px solid #eee; border-radius:5px; margin:5px 0; height:20px; position:relative;">
              <div class="progress-bar" style="width:0%; background:${getProgressColor(0)}; height:100%; border-radius:5px;"></div>
              <div style="position:absolute; top:0; left:5px; line-height:20px;">${usedFlowText}GB</div>
              <div class="progress-text" style="position:absolute; top:0; width:100%; text-align:center; line-height:20px;">0%</div>
              <div style="position:absolute; top:0; right:5px; line-height:20px;">${totalFlowText}GB</div>
          </div>
          Âà∞ÊúüÊó∂Èó¥Ôºö${expireDate}`;

            el.appendChild(el_title);
            netCard?.parentElement?.appendChild(el);
            setTimeout(() => animateProgress(el, progress), 100);
        };

        const data = await fetchData();
        if (!data || data.code !== 1 || !data.data || !data.data.card) {
            const netCard = document.querySelector('.net-card');
            const el = document.createElement('div');
            el.innerHTML = 'Âç°‰ø°ÊÅØÂä†ËΩΩÂ§±Ë¥•';
            el.style.color = 'red';
            el.style.padding = '8px';
            netCard?.parentElement?.appendChild(el);
            return;
        }
        showData(data);
    })();
</script>
<style>
    .statusCard {
        box-sizing: border-box
    }

    @media (max-width: 650px) {
        .wlk {
            margin-left: 3px !important;
            margin-right: 3px !important;
            height: 80px !important;
        }
    }

    .wlk.statusCard {
        height: 80px !important;
    }

    .cpu-card {
        height: 60px;
    }

    .chart.statusCard {
        height: 80px !important;
    }
</style>